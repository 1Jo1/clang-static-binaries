name: release

on:
  push
  # tags:
  #   - "[0-9]+.[0-9]+.[0-9]+*"

jobs:
  build-win-mac:
    name: build (${{ matrix.config.name }}, ${{ matrix.config.arch }})
    runs-on:
      ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - name: darwin
            os: macos-latest
            os-cmake-args: '-DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang'
            build-args: '-j$(sysctl -n hw.ncpu)'
            dep-tool: 'otool -L'
            bindir: '/build/bin'
            arch: amd64
          - name: windows
            os: windows-latest
            os-cmake-args: '-DCMAKE_CXX_FLAGS="/MP /std:c++14" -DLLVM_USE_CRT_MINSIZEREL="MT"'
            build-args: '--config MinSizeRel'
            dep-tool: 'dumpbin'
            bindir: '/build/MinSizeRel/bin'
            extra-tar-args: '--exclude=${RELEASE}/clang/test/Driver/Inputs/* --exclude=${RELEASE}/libcxx/test/std/input.output/filesystems/Inputs/static_test_env/* --exclude=${RELEASE}/libclc/amdgcn-mesa3d'
            arch: 386
            extension: .exe
          - name: windows
            os: windows-latest
            os-cmake-args: '-Thost=x64 -DCMAKE_CXX_FLAGS="/MP /std:c++14" -DLLVM_USE_CRT_MINSIZEREL="MT"'
            build-args: '--config MinSizeRel'
            dep-tool: 'dumpbin'
            bindir: '/build/MinSizeRel/bin'
            arch: amd64
            extra-tar-args: '--exclude=${RELEASE}/clang/test/Driver/Inputs/* --exclude=${RELEASE}/libcxx/test/std/input.output/filesystems/Inputs/static_test_env/* --exclude=${RELEASE}/libclc/amdgcn-mesa3d'
            extension: .exe
    env:
      COMMON_CMAKE_ARGS: '-DBUILD_SHARED_LIBS=OFF -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra"'
      RELEASE: 'llvm-project-12.0.0.src'
    defaults:
      run:
        shell: bash

    steps:

    - name: get llvm-project
      run: curl -L https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.0/${{ env.RELEASE }}.tar.xz | tar -xJ ${{ matrix.config.extra-tar-args }}

    - name: cmake
      run: | 
        cd ${{ env.RELEASE }}
        mkdir build
        cd build
        cmake ../llvm ${{ env.COMMON_CMAKE_ARGS }} ${{ matrix.config.os-cmake-args }}

    - name: build
      run: cmake --build ${{ env.RELEASE }}/build ${{ matrix.config.build-args }} --target clang-format clangd

    - name: print dependencies
      run:  |
        ${{ matrix.config.dep-tool }} ${{ env.RELEASE }}${{ matrix.config.bindir }}/clangd${{ matrix.config.extension }}
        ${{ matrix.config.dep-tool }} ${{ env.RELEASE }}${{ matrix.config.bindir }}/clang-format${{ matrix.config.extension }}


    - name: upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: clang-${{ matrix.config.name }}-${{ matrix.config.arch }}
        path: |
          ${{ env.RELEASE }}${{ matrix.config.bindir }}/clangd${{ matrix.config.extension }}
          ${{ env.RELEASE }}${{ matrix.config.bindir }}/clang-format${{ matrix.config.extension }}

  build-linux:
    name: build (${{ matrix.config.name }}, ${{ matrix.config.arch }})
    runs-on:
      ubuntu-latest
    # apparently env vars cannot be defined here with container (https://github.community/t/how-to-use-env-with-container-image/17252)
    strategy:
      matrix:
        config:
          - name: linux
            arch: amd64
            os-cmake-args: '-DCMAKE_CXX_COMPILER=x86_64-ubuntu16.04-linux-gnu-g++ -DCMAKE_C_COMPILER=x86_64-ubuntu16.04-linux-gnu-gcc'
          - name: linux
            arch: 386
            os-cmake-args: '-DCMAKE_CXX_COMPILER=i686-ubuntu16.04-linux-gnu-g++ -DCMAKE_C_COMPILER=i686-ubuntu16.04-linux-gnu-gcc'
          - name: linux
            arch: arm
            os-cmake-args: '-DCMAKE_CXX_COMPILER=arm-linux-gnueabihf-g++ -DCMAKE_C_COMPILER=arm-linux-gnueabihf-gcc -DCMAKE_CROSSCOMPILING=True -DLLVM_DEFAULT_TARGET_TRIPLE=arm-linux-gnueabihf -DLLVM_TARGET_ARCH=ARM -DLLVM_TARGETS_TO_BUILD=ARM -DLLVM_TABLEGEN=/tmp/llvm-tblgen -DCLANG_TABLEGEN=/tmp/clang-tblgen'
          - name: linux
            arch: arm64
            os-cmake-args: '-DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CROSSCOMPILING=True -DLLVM_TARGET_ARCH=AArch64 -DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD=AArch64 -DLLVM_TABLEGEN=/tmp/llvm-tblgen -DCLANG_TABLEGEN=/tmp/clang-tblgen'

    container:
      image: ghcr.io/arduino/crossbuild:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.CLANG_CI_PAT }}

    steps:

    - name: Set RELEASE vars
      run: |
        echo "RELEASE=llvm-project-12.0.0.src" >> $GITHUB_ENV
        echo "COMMON_CMAKE_ARGS=-DBUILD_SHARED_LIBS=OFF -DLLVM_ENABLE_PROJECTS=\"clang;clang-tools-extra\" -DCMAKE_CXX_FLAGS=\"-s -static-libstdc++ -static-libgcc\" -DCMAKE_BUILD_TYPE=MinSizeRel" >> $GITHUB_ENV

    - name: get llvm-project
      run: curl -L https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.0/${{ env.RELEASE }}.tar.xz | tar -xJ

    - name: install Ninja
      run: apt update && apt install ninja-build

    - name: build llvm-tblgen clang-tblgen with the host toolchain
      run: |
        cd ${{ env.RELEASE }}
        mkdir -p build
        cd build
        cmake -G Ninja ../llvm  ${{ env.COMMON_CMAKE_ARGS }} -DCMAKE_CXX_COMPILER=x86_64-ubuntu16.04-linux-gnu-g++ -DCMAKE_C_COMPILER=x86_64-ubuntu16.04-linux-gnu-gcc
        ninja llvm-tblgen clang-tblgen
        cp -v bin/llvm-tblgen /tmp
        cp -v bin/clang-tblgen /tmp
        rm -rf *
      if: matrix.config.arch == 'arm' || matrix.config.arch == 'arm64'

    - name: build clangd and clang-format
      run: |
        cd ${{ env.RELEASE }}
        mkdir -p build
        cd build
        cmake -G Ninja ../llvm ${{ env.COMMON_CMAKE_ARGS }}  ${{ matrix.config.os-cmake-args }}
        ninja clang-format clangd

    - name: upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: clang-${{ matrix.config.name }}-${{ matrix.config.arch }}
        path: |
          ${{ env.RELEASE }}/build/bin/clangd*
          ${{ env.RELEASE }}/build/bin/clang-format*
